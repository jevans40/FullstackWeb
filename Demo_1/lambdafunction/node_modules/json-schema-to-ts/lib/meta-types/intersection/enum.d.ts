import { Get } from "../../utils";
import { MetaType, Never, Const, Error } from "..";
import { Enum, Values } from "../enum";
import { IntersectConst } from "./const";
import { IntersectUnion } from "./union";
import { IntersectExclusion } from "./exclusion";
import { Intersect } from "./index";
export declare type IntersectEnum<A, B> = {
    any: A;
    never: Never;
    const: IntersectConst<B, A>;
    enum: FilterExtendingResolved<A, B>;
    primitive: FilterExtendingResolved<A, B>;
    array: FilterExtendingResolved<A, B>;
    tuple: FilterExtendingResolved<A, B>;
    object: FilterExtendingResolved<A, B>;
    union: IntersectUnion<B, A>;
    exclusion: IntersectExclusion<B, A>;
    intersection: Error<"Cannot intersect intersection">;
    error: B;
    errorTypeProperty: Error<"Missing type property">;
}[Get<B, "type"> extends MetaType ? Get<B, "type"> : "errorTypeProperty"];
declare type FilterExtendingResolved<A, B> = Enum<RecurseOnEnumValues<Values<A>, B>>;
declare type RecurseOnEnumValues<V, B> = V extends infer T ? Intersect<Const<T>, B> extends Never ? never : T : never;
export {};
